use puts(string);
use printf(string, ...);
use snprintf(buffer, int, string, ...);

main {
  puts("hello world");
  printf("I can see %i things", 5);
  return 0;
}
------
declare i32 @puts(i8* noalias nocapture) nounwind
declare i32 @printf(i8* noalias nocapture, ...) nounwind
declare i32 @snprintf(i8* noalias nocapture, i32, i8* noalias nocapture, ...) nounwind
@str = private unnamed_addr constant [12 x i8] c"hello world\00"
@str2 = private unnamed_addr constant [20 x i8] c"I can see %i things\00"
define i32 @main() {
  %var = getelementptr [12 x i8]* @str, i64 0, i64 0
  %var2 = call i32 (i8*)* @puts(i8* %var)
  %var3 = getelementptr [20 x i8]* @str2, i64 0, i64 0
  %var4 = call i32 (i8*, ...)* @printf(i8* %var3, i32 5)
  ret i32 0
}

------

------
File ([
  UseStatement puts ([
    [Type string]
  ])
  UseStatement printf var_args ([
    [Type string]
  ])
  UseStatement snprintf var_args ([
    [Type buffer]
    [Type int]
    [Type string]
  ])
  FnDef [Type int] main (
  statements: [
    FnCall puts ([
      Literal [Type string] (hello world)
    ]
    signature: UseStatement ([
      [Type string]
    ]))
    FnCall printf ([
      Literal [Type string] (I can see %i things)
      Literal [Type int] (5)
    ]
    signature: UseStatement var_args ([
      [Type string]
    ]))
    ReturnStatement [Type int] (Literal [Type int] (0))
  ])
])
